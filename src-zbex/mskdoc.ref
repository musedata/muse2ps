&dA 
&dA &d@               &dE  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»  &d@ 
&dA &d@               &dE  º    MSKPAGE.Z and Related Programs    º  &d@ 
&dA &d@               &dE  ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼  &d@ 
&dA 
&dA &d@                     Program to assemble linear i-files 
&dA &d@               into sets of systems for page specific output 
&dA &d@                                 
&dA &d@                        Version 4.2  (rev. 12/20/10) 
&dA 
&dA &d@     This source code is used to generate five programs: 
&dA &d@        &dEmskpage.z&d@   &dExmskpage.z&d@   &dEspaging.z&d@   &dEmscroll.z&d@   &dEscrpage.z&d@ 
&dA 
&dA &d@     Four of these programs are currently in active use, and have 
&dA &d@     the following relationship: 
&dA 
&dA &d@                          Output to pages      Scroll output 
&dA &d@                          (SCROLL_OUT = 0)    (SCROLL_OUT = 1) 
&dA &d@                      ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ 
&dA &d@     Regular output,  ³     &dEmskpage.z&d@      ³     &dEmscroll.z&d@      ³ 
&dA &d@       no paramters   ³    Pars = (0,0)    ³    Pars = (0,1)    ³ 
&dA &d@     (SCORE_PARS = 0) ³                    ³                    ³ 
&dA &d@                      ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´ 
&dA &d@     Include score    ³     &dEspaging.z&d@      ³     &dEscrpage.z&d@      ³ 
&dA &d@       parameters     ³    Pars = (1,0)    ³    Pars = (1,1)    ³ 
&dA &d@     (SCORE_PARS = 1) ³                    ³                    ³ 
&dA &d@                      ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
&dA &d@                     Compiling Paramaters (SCORE_PARS, SCROLL_OUT) 
&dA 
&dA &d@     The mskpage.z and mscroll.z programs are run from score type  
&dA &d@     libraries, e.g., &dCscore&d@, &dCskore&d@, &dCparts&d@, etc., in various sizes 
&dA 
&dA &d@     In contrast, the spaging.z and scrpage.z programs can only be 
&dA &d@     run from the &dCscrcon&d@ library.  The reason is that these problems 
&dA &d@     rely on extra parameters generated only by autoscr, which puts 
&dA &d@     its output in scrcon.  
&dA 
&dA &d@     By convention, the output to multiple pages (SCROLL_OUT = 0) 
&dA &d@     should be directed to the library &dCpages&d@ within the working 
&dA &d@     library (described above).  The output to a single scrolling 
&dA &d@     page (SCROLL_OUT = 1) should be directed to the library &dCspage&d@ 
&dA &d@     in the same working library.  
&dA 
&dA &d@     mskpage and its derivitives take advantage of a format file 
&dA &d@     in the library &dCformats&d@ (in the working directory), if one has 
&dA &d@     been created.  If extensive work has been done on formatting 
&dA &d@     page output, the interline spacings (system spacings) may have 
&dA &d@     become skewed in various ways that would be undesirable for 
&dA &d@     simple scrolled output.  For this reason, there may be a 
&dA &d@     second format library called &dCsformats&d@ containing format files 
&dA &d@     for use only with &dEmscroll.z&d@ and &dEscrpage.z&d@.  
&dA 
&dA 
&dA 
&dA &d@     Version control 
&dA &d@     ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@       03-25-06           Adding code to construct "@ MVT:", "@ SYSTEM:" 
&dA &d@                            "@ SOURCE:", "@ LINE:" and "@ TEXT:" records.  
&dA 
&dA &d@       11-12-06           Fixing a small bug
&dA 
&dA &d@       11-20-06           Adding an option for running a "simple test" 
&dA 
&dA &d@       11-20-06           Fixing a minor bug related to right justification
&dA 
&dA &d@       02-09-07           Fixing a minor bug related whole rests             
&dA 
&dA &d@       10-15-07           Adding a feature that allows a line of music with
&dA &d@                          non floating rests to be removed if capital letters
&dA &d@                          were used to denote the rest type.  In this situation
&dA &d@                          the autoset/autoscr program denotes rests with     
&dA &d@                          jtype = "r" instead of jtype = "R".  Mskpage treats
&dA &d@                          the small r as a flag, and substitutes a capital R
&dA &d@                          in the output file (we hope).  
&dA 
&dA &d@       11-02-07           I need to do something about the case where there is
&dA &d@                          a key change at the end of a line                        
&dA 
&dA &d@       05-06-08           I found an area of mskpage which seems to be incomplete
&dA &d@                          This showed up in a case where a first ending was quite
&dA &d@                          long--spanning two pages, and starting at the beginning
&dA &d@                          of a line, i.e., thrown over from the bar line on the
&dA &d@                          previous page.  I think I have written some robust code
&dA &d@                          to deal with this situation, but this code does not deal
&dA &d@                          with the case where an ending neither starts nor ends on
&dA &d@                          a page.  Furthermore, this problem may extend to other
&dA &d@                          horizontal lines as well, in which case the algorithm 
&dA &d@                          may need to be extended.  
&dA 
&dA &d@       06-09-08           Referring to the previous entry, it turns out that mskpage
&dA &d@                          was deficient in dealing with several super-object types
&dA &d@                          extending over more than two systems.  I have chosen to fix
&dA &d@                          only one of these cases at this time, namely dashes.
&dA &d@                          The fix requires new code in three places: 
&dA 
&dA &d@                          1) setting superdata(f12,k,6) = 234567 when an incomplete
&dA &d@                          dashes super-object is encountered at the end of a system.
&dA &d@                          This is a magic number for dashes only.  
&dA 
&dA &d@                          2) When processing a part on a new system, if             
&dA &d@                          superdata(f12,k,6) = 234567, then set superdata(f12,k,7) = 1.
&dA &d@                          This signals an incompelete dashes super-object at the
&dA &d@                          beginning of a system.  
&dA 
&dA &d@                          3) Mskpage already tries to typeset incomplete (split)      
&dA &d@                          super-objects at the end of a system line; the problem was
&dA &d@                          that if the object starting the super-object was not also on
&dA &d@                          that line, then there was no start and therefore no visable
&dA &d@                          super_object.  Now, for dashes, if superdata(f12,k,7) = 1, 
&dA &d@                          an object mark is placed at the beginning of the line.
&dA 
&dA &d@                          4) Of course, superdata(f12,k,6) and superdata(f12,k,7) must 
&dA &d@                          now be initialized to zero whenever a new super-object is 
&dA &d@                          encountered.  
&dA 
&dA &d@                          I think this type of code will also work for octave transpositions,
&dA &d@                          but not for slurs or wedges.  
&dA 
&dA &d@       10-08-08           When typesetting parts, we sometimes want a wider page format.
&dA &d@                          I am introducing a compile variable WIDE, which when set will
&dA &d@                          widen the horizontal limits on systems.                       
&dA 
&dA &d@       10-08-08           mskpage has the annoying feature of placing the measure numbers
&dA &d@                          where they can get in the way of other things at the beginning
&dA &d@                          of the line.  I changed this.  Lets see how we like the new code.
&dA 
&dA &d@       10-31-08           I added a feature to autoset, which recognized the subdivision
&dA &d@                          of multiple rests into smaller units.  Under normal conditions
&dA &d@                          when making parts, mskpage handles this just fine.  But if 
&dA &d@                          mskpage is used for comparing parts, this feature caused  
&dA &d@                          some measures to be "double counted," thus throwing off the
&dA &d@                          counters and flags.  The problem and its "fix" are described
&dA &d@                          in more detail in the code.  Like many fixes however, there
&dA &d@                          may be some unwanted side effects.  
&dA 
&dA &d@       11-06-08           There is a corner case I don't understand yet.  It can result
&dA &d@                          in delta being 0 unexpectedly at a point in the line adjustment
&dA &d@                          loop, which leads to code failure.  To avoid this, I include code
&dA &d@                          which terminates the line adjustment loop when delta = 0, but
&dA &d@                          the corner case still exists.  
&dA 
&dA &d@       01-01-09           Adding notesize 16
&dA 
&dA &d@       01-01-09           Expanding on the "wide" score feature.  The 4th line of the 
&dA &d@                          formats file may now contain extra words which can be used 
&dA &d@                          to set the horizonal margins of the system.  If the word
&dA &d@                          "wide" is found in the line, mskpage looks for two numbers.
&dA &d@                          These are interpreted as the number of dots, left and right,
&dA &d@                          to expand the margins.  If no numbers are found, the defaults
&dA &d@                          are 100 and 100 dots.  
&dA 
&dA &d@       01-29-09           I have encountered a new problem with object order.  When there
&dA &d@                          is a clef change at the end of a measure, and this is preceded
&dA &d@                          by grace notes at the end of that measure, the autoset program
&dA &d@                          does the predictable thing, i.e., set the grace notes first,
&dA &d@                          then the clef change.  But mskpage thinks that grace notes at
&dA &d@                          end of a measure can only be followed by more grace notes or
&dA &d@                          by a bar line.  I'm not sure what the global "fix" for this
&dA &d@                          problem is; object order has always been problematic in this
&dA &d@                          program.  What I propose here is a simple "case fix."   I have
&dA &d@                          found a place in the program where a call to getcontrol caused
&dA &d@                          the control record &dCcrec&d@ to actually back up.  Since this, in 
&dA &d@                          theory, should never happen, and since this occurs specifically
&dA &d@                          when grace notes at the end of a measure are followed not by
&dA &d@                          a bar line but by an end-of-meausre clef change, I have added  
&dA &d@                          some code to negate this backup.  For the moment, this seems to
&dA &d@                          fix the problem.  Stand by.
&dA 
&dA &d@       01-29-09           Adding a small feature that allows the instrument designation  
&dA &d@                          for the grand staff (e.g., Pf) to be placed midway between the
&dA &d@                          the staves
&dA 
&dA &d@       02-01-09           Guess what!  We really did run out of super-object capacity. 
&dA &d@                          We need to make this bigger.  The limit is now N_SUPER.
&dA 
&dA &d@       02-13-09           Well, I found the place where mskpage was misallocating space
&dA &d@                          for multiple rests at the beginning of a system line (parts only).
&dA &d@                          It's fixed now (I think).  
&dA 
&dA &d@       03-06-09           There needs to be a way to enter the "wide" command when there
&dA &d@                          is no format file (or when a new format file is being compiled).  
&dA 
&dA 
&dA &d@       11-30-09           Adding the "scrolling" versions of mskpage.z and spaging.z    
&dA 
&dA 
&dA &d@       12-18-10           Adding the ability to transmit "color" to i-files.  This     
&dA &d@                          applies to relevant sub-objects and to ties and beams only.
&dA 
&dA 
&dA &d@                        &dE  ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»  
&dA &d@                        &dE  º     PAGING     º  
&dA &d@                        &dE  º  ============  º  
&dA &d@                        &dE  º(rev. 10/04/07) º  
&dA &d@                        &dE  ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼  
&dA 
&dA 
&dA &d@      This program is the second of a set of three programs designed 
&dA &d@      to convert &dEMUSEDATA Stage 2&d@ full-score files into &dESCORE pmx&d@ 
&dA &d@      files.  The program was originally based on the 2.2 version 
&dA &d@      (rev. 12/04/00) of mskpage.   The current version is merged 
&dA &d@      with mskpage on 10/12/07.  The input to the program are non 
&dA &d@      page specific I-files, with additional information attached 
&dA &d@      by the autoscr program.  
&dA 
&dA &d@      While compiling page files, the paging program has new, 
&dA &d@      additional tasks to perform.  It must pass on information 
&dA &d@      from non page specific i-files to page specific i-files which 
&dA &d@      the mskpage program does not have to deal with.  The paging 
&dA &d@      program may also provide additional processing that will make 
&dA &d@      scorecon's job easier.  In particular, there is a lot of 
&dA &d@      information relating to horizontal and vertical position, 
&dA &d@      which is being generated for the first time by paging and 
&dA &d@      which translates directly into SCORE parameters.  
&dA 
&dA &d@      Since versatility of size is not a consideration in data conversion, 
&dA &d@      the paging program is designed to operate at one size only, namely, 
&dA &d@      size-14.  
&dA 

&dA                                                                        
&dA &d@           Explanation of Variables                       
&dA &d@       ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@                                                          
&dA &d@ I. Horizontal distance related 
&dA 
&dA &d@    olddist(32)     =  x-value of last object (.) 
&dA &d@    bolddist(32)    =  x-value of last object which was typeset (.) 
&dA &d@    sp              =  x co-ordinate of line 
&dA &d@    obx             =  object x co-ordinate 
&dA &d@    sobx            =  sub-object x co-ordinte 
&dA &d@    sobx2           =  optional second value of sobx for "T" text records
&dA &d@    saved_sobx2     =  old value of sobx2 for "T" text record            
&dA &d@    x               =  x co-ordinate for typesetting 
&dA &d@    x1,x2           = 
&dA &d@    pdist           =  horizontal location along staff line 
&dA &d@    ldist           =  absolute horizontal location along current line 
&dA &d@    point           =  horizontal location along staff at print time 
&dA &d@    prev_point      =  previous value of point on this staff line       
&dA &d@    point_adv       =  point - prev_point                               
&dA &d@    oldmpoint       =  value of point at last bar line 
&dA &d@    oldmp2          =  adjusted value of last bar line (first measure) 
&dA &d@    dxoff(32)       =  x offset for directive thrown to next line 
&dA &d@    tdist(32,2)     =  new values of olddist for parts in a node 
&dA &d@    rmarg           =  temporary right margin (usually hxpar(4)) 
&dA &d@    delta           =  distance to make up in line expansion 
&dA &d@    firstbarflag    =  0: first bar on a line; 1: subsequent bars on a line (print loop)
&dA &d@    pn_left         =  amount by which part names need to be moved left to avoid a clash
&dA 
&dA &d@ II. Vertical distance related 
&dA 
&dA &d@    psq(32)         =  preliminary (at start) y co-ordinate of line (.) 
&dA &d@    sq(32)          =  y co-ordinate of line (.) 
&dA &d@    vst(32)         =  y shift (down) to auxiliary staff line (grand staff) 
&dA &d@    oby             =  object y co-ordinate 
&dA &d@    coby            =  object y co-ordinate (control) 
&dA &d@    soby            =  sub-object y co-ordinate 
&dA &d@    y               =  y co-ordinate for typesetting 
&dA &d@    y1,y2           = 
&dA &d@    savenoby(32)    =  save variable for oby 
&dA &d@    dyoff(32)       =  y offset for directive thrown to next line 
&dA 
&dA &d@ III. Record related 
&dA 
&dA &d@    rec             =  next record in file 
&dA &d@    crec            =  record number for proper object-node 
&dA &d@    drec(32)        =  record number for directive thrown to next line 
&dA &d@    saverec         =  place to save current value of rec while browsing 
&dA &d@    endbarrec       =  record number for last bar in line + 1 
&dA 
&dA &d@ IV. Counting and space related 
&dA 
&dA &d@    marc            =  number of objects in a measure 
&dA &d@    larc            =  number of objects on the line 
&dA &d@    larc2           =  number of objects on extended line 
&dA &d@    larr(300,MARR_PARS) =  distances between proper object nodes on a line
&dA &d@    marr(60,MARR_PARS)  =  distances between objects in measure           
&dA &d@                           (.,1) = distance from previous node 
&dA &d@                           (.,2) = type of node 
&dA &d@                                     14 = clef 
&dA &d@                                     15 = key 
&dA &d@                                     16 = time 
&dA &d@                                     17 = directive, bar, mult-rest, figure, mark
&dA &d@                                     18 = controlling bar (?) 
&dA &d@                           (.,3) = time number (576 = quarter note) 
&dA &d@                           (.,4) = space node number (max = 6913) (also called snode)
&dA &d@                           (.,5) = parts active on this node (snode = 6913 only)
&dA &d@                           (.,6) = space modification flag: 
&dA &d@                                     0 = O.K. to modify spacing in this measure
&dA &d@                                     1 = don't modify spacings in this measure
&dA &d@                           (.,7) = temporary data
&dA &d@    tarr(32)        =  temporary array 
&dA &d@    tarr2(32)       =  temporary array 
&dA &d@    tarr3(32)       =  temporary array 
&dA &d@    tarr4(32,4)     =  temporary array introduced to fixed setckt 
&dA &d@    tarr5(32,2)     =  temporary array                            
&dA &d@    adjarr(300,4)   =  collection of distances to add 
&dA &d@    adjarc          =  counter for adjarr 
&dA &d@    small(300)      =  list of smallest nodes on a line 
&dA &d@    scnt            =  counter for small 
&dA &d@    small2(300)     =  list of smallest nodes on a line 
&dA &d@    scnt2           =  counter for small2               
&dA &d@    barnum          =  measure number 
&dA &d@    oldbarnum       =  measure at beginning of line 
&dA &d@    newbarnum       =  measure number for next line 
&dA &d@    snode           =  space node number 
&dA &d@    csnode          =  space node number (control) 
&dA &d@    dincf           =  distance increment flag 
&dA &d@    cdincf(32)      =  cumulative distance increment flag for part (.) 
&dA &d@    ndincf(32)      =  next distance increment flag for part (.) 
&dA &d@    barcount        =  counter for bars on a particular line 
&dA &d@    barpar(40,3)    =  measure parameters, first subscript = barcount 
&dA &d@                         (.,1) = length of measure 
&dA &d@                         (.,2) = node number for terminating bar line 
&dA &d@                         (.,3) = type for terminating bar line 
&dA &d@   sysbarpar(400,5) =  parameters relating to the number and size of measures (bars) per system
&dA &d@                         (.,1) = number of bars per system 
&dA &d@                         (.,2) = extra space on a system before justification 
&dA &d@                         (.,3) = if > 0, this is the max number of bars allowed on this system
&dA &d@                         (.,4) = extra space, assuming last measure is removed
&dA &d@                         (.,5) = sys_jflag for this system     
&dA &d@  oldsysbarpar(.,.) =  saving values of sysbarpar 1 and 2 for going back to a previous solution
&dA &d@                         (.,1) = number of bars per system 
&dA &d@                         (.,2) = extra space on a system before justification 
&dA 
&dA &d@ IV. Type related 
&dA 
&dA &d@    jtype.1         =  type of object 
&dA &d@    cjtype.1        =  type of object (control) 
&dA &d@    htype.1         =  type of super-object 
&dA &d@    lbyte.1         =  type of line "L" or "l"              
&dA &d@    ntype           =  field three in an object record 
&dA &d@    cntype          =  field three in an object record (control) 
&dA 
&dA &d@ V. Super-object related 
&dA 
&dA &d@    supernum        =  super-object number 
&dA &d@    supermap(32,N_SUPER)            =  mapping pointer (N_SUPER simultaneous super-objects)
&dA &d@    superpnt(32,N_SUPER)            =  pointer into superdata storage array
&dA &d@    superdata(32,N_SUPER,SUPERSIZE) =  information for compiling super-object
&dA &d@    supcnt          =  number of super-objects attached to an object 
&dA &d@    conttie(32)     =  continued tie flag.  Used for setting accidentals 
&dA 
&dA &d@ VI. Beam related 
&dA 
&dA &d@    beamdata(MAX_BNOTES,2)  =  data for typesetting beam 
&dA &d@    beamcode.6(MAX_BNOTES)  =  beamcode 
&dA &d@    bcount          =  number of notes under a beam 
&dA &d@    beamfont        =  font for printing beam 
&dA &d@    beamt           =  vertical space between beams 
&dA &d@    beamh           =  height parameter for beams 
&dA &d@    stemchar        =  character number for stem 
&dA &d@    stem            =  stem direction flag 
&dA 
&dA &d@ VII. Tie related 
&dA 
&dA &d@    sitflag         =  situation flag for ties 
&dA &d@    tspan           =  distance spanned by tie 
&dA 
&dA &d@ VIII. Text related 
&dA 
&dA &d@    textline.232    =  working string for text 
&dA &d@    ttext.80        =  text to typeset 
&dA &d@    xbyte.10(32)    =  extension byte  (-_,.;:!?)   (ten of them) 
&dA &d@    textflag        =  text present flag 
&dA &d@    textlen         =  length of syllable to typeset 
&dA &d@    backloc(32)     =  location of first space beyond last syllable 
&dA &d@    uxstart(32)     =  x-coord. of first space beyond last syllable 
&dA &d@    uxstop(32)      =  x-coordinate of end of line 
&dA &d@    nuxstop(32)     = 
&dA 
&dA &d@ IX. Character related 
&dA 
&dA &d@    notesize        =  size of note 
&dA &d@    maxnotesize     =  maximum of all notesizes
&dA &d@    mtfont          =  text font number 
&dA &d@    z               =  number of character to typeset 
&dA &d@    cz              =  number of character to typeset (control) 
&dA 
&dA &d@ X. Parameters 
&dA 
&dA &d@    hxpar(25)       =  fixed horizontal spacing parameters 
&dA &d@    hpar(32,25)     =  variable horizontal spacing parameters (32 lines max) 
&dA &d@    vpar(32,41)     =  variable vertical spacing parameters 
&dA &d@    vpar20(32)      =  10 times notesize (20 claves) 
&dA &d@    zak(2,6)        =  accidental placement parameters 
&dA 
&dA &d@ XI. Flags 
&dA 
&dA &d@    nflg1           =  set of parts in node (bits 31--0: parts 1--32) 
&dA &d@    rflag(40)       =  global rest in meas(barcount) (# > 0: distance) 
&dA &d@    endflag         =  completion flag 
&dA &d@    f(32,1)         =  first record in part (.) 
&dA &d@    f(32,2)         =  last record in part(.) 
&dA &d@    f(32,3)         =  size of clef and key header for part(.) 
&dA &d@    f(32,4)         =  record at new line of music for part(.)   (bbrec) 
&dA &d@    f(32,5)         =  record at new measure of music for part(.)(brec) 
&dA &d@    f(32,6)         =  next record to read in part(.)            (rec) 
&dA &d@    f(32,7)         =  multiple rest counter for part(.) 
&dA &d@    f(32,8)         =  completion flag for part(.) 
&dA &d@    f(32,9)         =  vertical displacement of text (0 = no text) 
&dA &d@    f(32,10)        =  first temporary multiple rest counter 
&dA &d@    f(32,11)        =  second temporary multiple rest counter 
&dA &d@    f(32,12)        =  staff flag:  0 = normal staff                    
&dA &d@                    =               1 = continuo part (no printing of rests) 
&dA &d@                    =               2 = grand staff (auxiliary stave) 
&dA &d@    f(32,13)        =  number of levels of text in this file            
&dA &d@    f(32,14)        =  notesize                                         
&dA &d@    f(32,15)        =  line flag:   1 = "L"  
&dA &d@                                    2 = "l" 
&dA &d@    f(32,16)        =  trans flag (spaging only) 
&dA &d@    f(32,17)        =  instrument number (spaging only) 
&dA &d@    f2              =  general rest in extra measure on line 
&dA &d@    f4              =  end of line flag 
&dA &d@    f5              =  bar spitting flag (for types 9 and 10) 
&dA &d@    f11             =  number of parts 
&dA &d@    f12             =  current part number 
&dA &d@    f13             =  first line flag  (zero = first line) 
&dA &d@                           music on line 
&dA &d@    cflag           =  set: center object in measure (for whole rests) 
&dA 
&dA &d@ XII. Music related 
&dA 
&dA &d@    key(32)         =  operative number of sharps (flats) (.) 
&dA &d@    clef(32,2)      =  operative clef (.,virtual staff number) 
&dA &d@    tcode(32)       =  time signature code (active, if time signature 
&dA &d@                         changes at the end of a line 
&dA 
&dA &d@ XIII. Format related         
&dA 
&dA &d@    formatflag      =  formatting options 
&dA &d@                         0 = don't use or create a format file        
&dA &d@                         1 = format file exist, use it 
&dA &d@                         2 = create a new format file 
&dA &d@    justflag        =  last line justify options 
&dA &d@                         0 = do not justify last line, go with first pass 
&dA &d@                         1 = justify last line using current line configuration
&dA &d@                         ( < 2 ) = produce output 
&dA &d@                         2 = last line is to be right justified 
&dA &d@                         3 = recompute line configuration 
&dA 
&dA &d@ XIV. Added for version 3.0 
&dA 
&dA &d@    table Y         =  pre-output for page files 
&dA &d@    table F         =  pre-output to format file 
&dA 
&dA &d@    str outfile     =  page specific output file (special name for safety) 
&dA 
&dA &d@    forp            =  pointer into table F 
&dA &d@    forpz           =  size of pre-existing format file 
&dA &d@    mainyp          =  main pointer into Y table 
&dA &d@    sv_mainyp       =  saved value of main pointer into Y table 
&dA &d@    y1p,y2p,y3p     =  pointers in table Y 
&dA 
&dA &d@ XV. Added for extended format files 
&dA 
&dA &d@    plarr(300,2)    =  first two elements of the larr array as read from the format file
&dA &d@    cum_larr(300,2) =  cumulative horizontal distances from first element of larr array
&dA &d@                        (.,1) = cumulative distance 
&dA &d@                        (.,2) = distance flag:  0 = determined from PRE_DIST      
&dA &d@                                                1 = determined from rflag(.)  e.g., G.P.
&dA &d@    cum_larrz       =  size of cum_larr array (can be bigger than larc) 
&dA &d@    larr_gen(20000) =  larr index (1st dim) which helped 
&dA &d@                         to generate the obx of an object record 
&dA &d@    plarc           =  counter for plarr  
&dA &d@    psysnum         =  system number 
&dA &d@    edflag          =  edit flag:  bit 0: 1 = edit always on 
&dA &d@                                   bit 1: 1 = selectively edit this system 
&dA &d@    larrx           =  a larr index 
&dA 
&dA &d@ XVI. Added implementing optional staff lines 
&dA 
&dA &d@    rest7           =  optional rest flag (used in procedure wholerest) 
&dA &d@    intersys        =  inter-system vertical space                            
&dA &d@    firstsys        =  first system flag           
&dA &d@    f11out          =  flag indicating the bottom line of system was removed
&dA &d@    mnum            =  measure number of last system to display             
&dA &d@    bottom_sq       =  value of sq for bottom staff (initially sq(f11)) 
&dA &d@    tf11            =  temporary value of f11 (used when removing lines) 
&dA &d@    tsq(.)          =  temporary values of sq(.) (used when removing lines)
&dA &d@    tvst(.)         =  temporary values of vst(.) (used when removing lines)
&dA &d@    tnotesize(.)    =  temporary values of notesizes(.) (used when removing lines)
&dA &d@    sys_bottom      =  y-value of system bottom (initially sq(f11) + vst(f11))     
&dA 
&dA &d@ XVII. Added implementing tag records            
&dA 
&dA &d@    str abbr.40(.)  =  abbreviated part names 
&dA &d@    abbr_cnt        =  counter into abbr 
&dA &d@    recflag(100000) =  record flags:   0xff: if non-zero, this is pointer to abbr part name
&dA &d@                                     0xff00: 0 = normal print rules               
&dA &d@                                             1 = tag as type-1 record                 
&dA &d@                                             2 = tag as type-2 record                 
&dA &d@    current_recf    =  current value of rec flag 
&dA &d@    type1_dflag(32) =  type 1 delete flag: initially set to on, then turned off
&dA &d@    type2_dflag(32) =  type 2 delete flag: initially set to off, then turned on
&dA 
&dA                                                                        

&dA                                                                        
&dA 
&dA &d@   Variable Vertical Parameters 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA 
&dA &d@   vpar(.,1)  =  one   vertical note space 
&dA &d@   vpar(.,2)  =  two      "       "  spaces 
&dA &d@   vpar(.,3)  =  three    "       "    " 
&dA &d@   vpar(.,4)  =  four     "       "    " 
&dA &d@   vpar(.,5)  =  five     "       "    " 
&dA &d@   vpar(.,6)  =  six      "       "    " 
&dA &d@   vpar(.,7)  =  seven    "       "    " 
&dA &d@   vpar(.,8)  =  eight    "       "    " 
&dA &d@   vpar(.,9)  =  nine     "       "    " 
&dA &d@   vpar(.,10) =  ten      "       "    " 
&dA &d@   vpar(.,11) =  vertical distance below staff line with text 
&dA &d@   vpar(.,12) =  vertical shift for printing two or more beams 
&dA &d@   vpar(.,13) =  not used 
&dA &d@   vpar(.,14) =  vertical distance below staff line without text 
&dA &d@   vpar(.,15) =  vert.  shift for printing italic 8 under treble clef 
&dA &d@   vpar(.,16) =  height parameter for beams 
&dA &d@   vpar(.,17) =  decrease in vpar(16) when range of notes exceeds vpar(3) 
&dA &d@   vpar(.,18) =  cutoff of severe up-down pattern under beam 
&dA &d@   vpar(.,19) =  maximum rise in beam character 
&dA &d@   vpar(.,20) =  amount to add to beam height to get stradle 
&dA &d@   vpar(.,21) =  cutoff for shifting beams to middle of next line 
&dA &d@   vpar(.,22) =  fudge factor for two/more slanted beams on staff lines 
&dA &d@   vpar(.,23) =  fudge factor for one slanted beam on staff lines 
&dA &d@   vpar(.,24) =  maximum rise allowed for beam on one staff line 
&dA &d@   vpar(.,25) =  minimum rise allowed for beam crossing two staff lines 
&dA &d@   vpar(.,26) =  minimum rise allowed for beam crossing three staff lines 
&dA &d@   vpar(.,27) =  minimum for sum of two stems under 2-note beam 
&dA &d@   vpar(.,28) =  amount to extend stems in case vpar(27) is not reached 
&dA &d@   vpar(.,29) =  minimum stem length that triggers adding to 16th stem 
&dA &d@   vpar(.,30) =  adjustment for raising 16th beams because of short stems 
&dA &d@   vpar(.,31) through vpar(34):  beam spacing parameters 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@      vpar(.,31) = beam thickness 
&dA &d@      vpar(.,32) = offset between beams (if two or three) 
&dA &d@      vpar(.,33) = offset between beams (if more than three in staff line) 
&dA &d@      vpar(.,34) = amount by which a hanging beam exceeds line height 
&dA 
&dA &d@                Beam and line parameters 
&dA &d@               ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@       Note    Beam    Beam   large    Hang    Line 
&dA &d@       size   width   offset  offset  delta   width 
&dA &d@      ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ 
&dA &d@        12       7      10      11       1       1 
&dA &d@        14       8      11      12       1       1 
&dA &d@        16       9      13      14       1       1 
&dA &d@        18      10      14      16       1       1 
&dA &d@        20      11      16      17       1       1 
&dA &d@        22      12      18      19       2       2 
&dA &d@        24      13      19      21       2       2 
&dA &d@        26      14      21      23       2       2 
&dA &d@        28      15      22      24       2       2 
&dA &d@        30      16      24      26       3       2 
&dA 
&dA 
&dA &d@                 Beam and line parameters 
&dA &d@                ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@                     (actual values) 
&dA 
&dA &d@       Note    Beam    Beam   large    Hang    Line 
&dA &d@       size   width   offset  offset  delta   width 
&dA &d@      ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ  ÄÄÄÄÄÄ 
&dA &d@         6       3       6       6       1       1 
&dA &d@        14       8      11      12       1       1 
&dA &d@        16       9      13      14       1       1 
&dA &d@        18      10      14      16       1       1 
&dA &d@        21      12      17      18       2       3 
&dA 
&dA 
&dA &d@   vpar(.,35) = maximum beam slope for short beams 
&dA &d@   vpar(.,36) = vertical location of level 1 of figures 
&dA &d@   vpar(.,37) = height of figures 
&dA &d@   vpar(.,38) = height of tuplet numbers 
&dA &d@   vpar(.,39) = placement of tuplet numbers above notes or beams 
&dA &d@   vpar(.,40) = bracket shift, when combined with tuplets 
&dA &d@   vpar(.,41) = thickness of staff line (1 for notesize = 14, etc.) 
&dA 
&dA 
&dA 
&dA &d@   Fixed Horizontal Parameters 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@   hxpar(1)  = length of standard beam character 
&dA &d@   hxpar(2)  = shift after key signature 
&dA &d@   hxpar(3)  = left margin for staff lines 
&dA &d@   hxpar(4)  = left margin + length of staff lines 
&dA &d@   hxpar(5)  = increment after key signature for lines 2 ...  
&dA &d@   hxpar(6)  = minimum space taken up by whole measure rest 
&dA &d@   hxpar(7)  = shift after bar line 
&dA &d@   hxpar(8)  = location for starting - or _ on new line (run time set) 
&dA &d@   hxpar(9)  = indent margin for first line 
&dA &d@   hxpar(10) = distance from beginning of staff line to first character 
&dA &d@   hxpar(11) = shift forward to print double bar at beginning of line 
&dA &d@   hxpar(12) = shift following common or cut time signature 
&dA &d@   hxpar(13) = shift after time signature 
&dA &d@   hxpar(14) = minimum extra shift after note with stem-up flag (hpar(28) in autoset)
&dA &d@   hxpar(15) = maximum value of hpar(.,15): shift after big clef sign 
&dA &d@   hxpar(16) = maximum value of hpar(.,16) 
&dA &d@   hxpar(17) = maximum value of hpar(.,17): heavy/light spacing + thickness of light line
&dA &d@   hxpar(18) = maximum value of hpar(.,18): shift back to print double dot repeat
&dA &d@   hxpar(19) = maximum value of hpar(.,19): shift for large number 
&dA &d@   hxpar(20) = maximum value of hpar(.,20): half shift for large number 
&dA &d@   hxpar(21) = maximum value of hpar(.,21): shift to middle of double digit time signature
&dA &d@   hxpar(22) = maximum value of hpar(.,22): shift to middle of single digit time signature
&dA 
&dA &d@   Variable Horizontal Parameters 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@   hpar(.,1)  = pseudo distance of continuation tie 
&dA &d@   hpar(.,2)  = overhang of underline past x-position of last note 
&dA &d@   hpar(.,3)  = skip before starting an underline 
&dA &d@   hpar(.,4)  = minimum space between underline and following syllable 
&dA &d@   hpar(.,5)  = horizontal shift for printing small italic 8 under treble clef
&dA &d@   hpar(.,6)  = shift following sharp or natural in key signature 
&dA &d@   hpar(.,7)  = shift following flat in key signature 
&dA &d@   hpar(.,8)  = width of quarter note, minus thickness of stem 
&dA &d@   hpar(.,9)  = olddist adjustment following common/cut time on new line 
&dA &d@   hpar(.,10) = shift following time number 
&dA &d@   hpar(.,11) = shift following double dot or double bar 
&dA &d@   hpar(.,12) = approximate width of grace note 
&dA &d@   hpar(.,13) = shift to commom time signature on new line 
&dA &d@   hpar(.,14) = pseudo distance of continuation slur 
&dA &d@   hpar(.,15) = shift after big clef sign 
&dA &d@   hpar(.,16) = thickness of heavy vertical line - thickness of light vertical line + 1
&dA &d@   hpar(.,17) = heavy/light spacing + thickness of light line       
&dA &d@   hpar(.,18) = shift back to print double dot repeat 
&dA &d@   hpar(.,19) = shift for large number 
&dA &d@   hpar(.,20) = half shift for large number 
&dA &d@   hpar(.,21) = shift to middle of double digit time signature 
&dA &d@   hpar(.,22) = shift to middle of single digit time signature 
&dA &d@   hpar(.,23) = right shift of continuo figures placed above notes 
&dA &d@   
&dA 
&dA &d@   Line and measure arrays 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA 
&dA &d@   larr(.,1) = distance between this proper object node and the 
&dA &d@                 previous proper object node 
&dA &d@   larr(.,2) = smallest object type for objects in this object node 
&dA 
&dA &d@         Type #        object                   
&dA &d@        ÄÄÄÄÄÄÄÄ      ÄÄÄÄÄÄÄÄ 
&dA &d@           1         256th note 
&dA &d@           2         128th   " 
&dA &d@           3         64th    " 
&dA &d@           4         32nd    " 
&dA &d@           5         16th    " 
&dA &d@           6         eighth  " 
&dA &d@           7         quarter " 
&dA &d@           8         half    " 
&dA &d@           9         whole   " 
&dA &d@          10         breve   " 
&dA &d@          11         longa   " 
&dA &d@          12         extended rest 
&dA &d@          13         whole measure rest 
&dA &d@          14         clef signature 
&dA &d@          15         key signature 
&dA &d@          16         time signature 
&dA &d@          17         other objects,directives 
&dA &d@          18         bar line 
&dA &d@          21-31      syncopated note 
&dA &d@          40         conflicting n-tuple 
&dA 
&dA &d@   larr(.,3) = recomputed distance increment flag for this node 
&dA &d@   larr(.,4) = space node number for this node 
&dA &d@   larr(.,5) = parts active on this node (for snode = 6913 only) 
&dA &d@   larr(.,6) = space modification flag:                             New &dA05/25/03
&dA &d@                 0 = O.K. to modify spacing in this measure 
&dA &d@                 1 = don't modify spacings in this measure 
&dA 
&dA &d@   Space adjustment array 
&dA &d@   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA 
&dA &d@   adjarr(.,1) = number in larr array 
&dA &d@   adjarr(.,2) = maximum possible distance to add 
&dA &d@   adjarr(.,3) = current largest distance for node of this type 
&dA &d@   adjarr(.,4) = final distance to add to node
&dA 
&dA                                                                        &d@        
                                                                         
&dA                                                                        &d@        
&dA &d@           Explanation of Variables brought over from ESKPAGE 
&dA &d@       ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@                                                          
&dA &d@ I. Horizontal distance related 
&dA 
&dA &d@    esksp           =  x co-ordinate of line 
&dA &d@    obx             =  object x co-ordinate 
&dA &d@    sobx            =  sub-object x co-ordinte 
&dA &d@    x               =  x co-ordinate for typesetting 
&dA &d@    x1,x2           = 
&dA &d@    postx           =  post adjustment to x co-ordinate after automatic computation of position
&dA 
&dA &d@ II. Vertical distance related 
&dA 
&dA &d@    esksq(32)       =  y co-ordinate of line (.) 
&dA &d@    eskvst(32)      =  y displacement to virtual staff (if present, 0 otherwise)
&dA &d@    oby             =  object y co-ordinate 
&dA &d@    soby            =  sub-object y co-ordinate 
&dA &d@    y               =  y co-ordinate for typesetting 
&dA &d@    y1,y2           = 
&dA &d@    eskdyoff(10)    =  y offset for directive thrown to next line 
&dA &d@    posty           =  post adjustment to y co-ordinate after automatic computation of position
&dA &d@    figoff(32)      =  additional off-set for figured harmony
&dA &d@    nsz(32)         =  notesize for each staff line in a system   
&dA &d@    govstaff        =  staff number whose notesize should be used 
&dA &d@                         for printing the left system bar, etc.  
&dA &d@    savensz         =  temporary variable for saving notesize     
&dA 
&dA &d@ III. Record related 
&dA 
&dA &d@    eskrec          =  next record in file 
&dA &d@    esksaverec      =  place to save current value of rec while browsing 
&dA 
&dA &d@ IV. Counting and space related 
&dA 
&dA &d@    tarr(32)        =  temporary array 
&dA &d@                         (1) = length of measure 
&dA &d@                         (2) = node number for terminating bar line 
&dA &d@                         (3) = type for terminating bar line 
&dA 
&dA &d@ IV. Type related 
&dA 
&dA &d@    jtype.1         =  type of object 
&dA &d@    htype.1         =  type of super-object 
&dA &d@    stave_type      =  type of line: 0 = "L" or 1 = "l"   
&dA &d@    ntype           =  field three in an object record 
&dA 
&dA &d@ V. Super-object related 
&dA 
&dA &d@    supernum             =  super-object number 
&dA &d@    esksupermap(50)      =  mapping pointer (SUPERMAX simultaneous super-objects)
&dA &d@    esksuperpnt(50)      =  pointer into esksuperdata storage array 
&dA &d@    esksuperdata(50,128) =  information for compiling super-object  SUPERMAX   SUPERSIZE
&dA &d@    supcnt               =  number of super-objects attached to an object 
&dA 
&dA &d@ VI. Beam related 
&dA 
&dA &d@    beamdata(32,2)  =  data for typesetting beam        MAX_BNOTES 
&dA &d@    beamcode.6(32)  =  beamcode                         MAX_BNOTES 
&dA &d@    bcount          =  number of notes under a beam 
&dA &d@    beamfont        =  font for printing beam 
&dA &d@    bthick          =  thickness of beamfont - 1 
&dA &d@    beamt           =  vertical space between beams 
&dA &d@    beamh           =  height parameter for beams 
&dA &d@    beamfy          =  y co-ordinate of first note under beam 
&dA &d@    qwid            =  width of quarter note 
&dA &d@    stem            =  stem direction flag 
&dA &d@    stemchar        =  character number for stem 
&dA &d@    tupldata(7)     =  data for typesetting tuplet at beam time 
&dA &d@    tbflag          =  flag for setting tuplet with beam 
&dA &d@    beamext(435,12) =  parameters for beam extension 
&dA 
&dA &d@ VII. Tie related 
&dA 
&dA &d@    hd              =  horizontal displacement of tie from first note 
&dA &d@    vd              =  vertical displacement of tie from first note 
&dA &d@    tiechar         =  tie character 
&dA &d@    tpost_x         =  post adjustment to left x position 
&dA &d@    tpost_y         =  post adjustment to y position 
&dA &d@    tpost_leng      =  post adjustment to right x position 
&dA &d@    sitflag         =  situation flag for ties 
&dA &d@    tcnt            =  counter for extending ties 
&dA &d@    tspan           =  distance spanned by tie 
&dA &d@    expar(8)        =  extension parameters for ties 
&dA &d@    textend         =  tie extension character 
&dA &d@    tiefile(4)      =  names of the four tie extension files 
&dA &d@    tiearr(#,4,#,12) = parameters for choosing ties (for three notesizes 14, 21, 6)
&dA 
&dA &d@ VIII. Text related 
&dA 
&dA &d@    textline.232    =  working string for text 
&dA &d@    ttext.80        =  text to typeset 
&dA &d@    ntext           =  number of text lines for a particular music line 
&dA &d@    tlevel          =  level number for line of text (field 3 of TEXT sub-object)
&dA &d@    eskxbyte.1(10)  =  extension byte  (-_,.;:!?)  (ten strophies) 
&dA &d@    eskbackloc(10)  =  location of first space beyond last syllable 
&dA &d@    ibackloc(10)    =  backloc(.) read from L record                    
&dA &d@    eskuxstart(10)  =  x-coord. of first space beyond last syllable 
&dA &d@    eskuxstop(10)   =  x-coordinate of end of underline 
&dA &d@    buxstop(10)     =  eskuxstop at bar line 
&dA 
&dA &d@ IX. Character related 
&dA 
&dA &d@    hyphspc(12)     =  space for text hyphon  
&dA &d@    underspc(12)    =  space for text underline character 
&dA &d@    urpos(256)      =  vertical offsets for music font characters (basic units)
&dA &d@    pos(256)        =  vertical offsets for music font characters (notesize included)
&dA &d@    notesize        =  size of note 
&dA &d@    z               =  number of character to typeset 
&dA &d@    z1,z3,z3        = 
&dA 
&dA &d@ X. Parameters 
&dA 
&dA &d@    wak(9)          =  character extension values (upper range) 
&dA 
&dA &d@ XI. Flags 
&dA 
&dA &d@    eskf(32,*)      =  vertical position (offset) of line * of text 
&dA &d@    f01             =  page number 
&dA &d@    f03             =  page counter 
&dA &d@    f04             =  number of records in table 
&dA &d@    eskf11          =  number of parts 
&dA &d@    eskf12          =  current part number 
&dA &d@    underflag       =  execution flag for setunder 
&dA 
&dA &d@  XII. Variables related to editing 
&dA 
&dA &d@    list_order(.,.) = link information for entries in table 
&dA &d@                       (1) previous entry in table 
&dA &d@                       (2) next entry in table 
&dA &d@                       (3) modified printing flag 
&dA &d@                            0 = skip record 
&dA &d@                           -1 = use record 
&dA &d@                       (4) >0 = index to alternate record 
&dA &d@                       (5) copy of (3); used to make save command work properly
&dA &d@  
&dA &d@    pointers(.,.)   = pointers relating to objects 
&dA &d@                       (1) pointer back to object in table (record pointer) 
&dA &d@                       (2) second pointer  (barlines) 
&dA &d@                       (3) pointer to next object in line (index in pointers array)
&dA &d@                       (4) pointer to previous object in line (index in pointers array)
&dA &d@                       (5) pointer to object above (index in pointers array) 
&dA &d@                       (6) pointer to object below (index in pointers array) 
&dA &d@                       (7) pointer to line record (record pointer) 
&dA &d@                       (8) pointer to system record (record pointer) 
&dA &d@                       (9) modified node number      
&dA &d@                      (10) larr index that helped generate obx 
&dA &d@  
&dA &d@    super_pointers(.,.)   = pointers relating to super-objects 
&dA &d@                       (1) pointer back to super-object in table (record pointer)
&dA &d@                       (2) second pointer  
&dA &d@                       (3) pointer into array containing lists of objects (related_objects())
&dA &d@                       (4) number of objects related to this super_object 
&dA &d@  
&dA &d@    related_objects(.)    = (table) addresses of objects connected to super-objects
&dA &d@  
&dA &d@    nodelist(.,.)   = list of node numbers and corresponding index in pointers array
&dA &d@                       numbers for a system 
&dA &d@                       (1) node number 
&dA &d@                       (2) index in pointers array 
&dA &d@  
&dA &d@    temp_store_ob(.,.) = list of objects having super objects 
&dA &d@                       (1) object address in table 
&dA &d@                       (2) super-object number 
&dA &d@  
&dA &d@    barlinks(.)     = list of bar objects in a system 
&dA &d@    barlink_cnt     = counter into barlinks list 
&dA &d@    system_rec(.)   = pointers to system records in X table 
&dA &d@    system_cnt      = number of systems on page
&dA &d@    object_count    = number of objects on the page 
&dA &d@    super_count     = number of super-objects on the page 
&dA &d@    nodenum         = object node number 
&dA &d@    curnode         = modified-node-number (includes measure number) 
&dA &d@    savecurnode     = first modified-node-number in a group 
&dA &d@    xsavecurnode    = index in pointers array of first node in group 
&dA &d@    xbacknode       = index in pointers array of first node in previous group         
&dA &d@    xupnode         = index in pointers array of node in line above this group
&dA &d@    measnum         = measure number in line 
&dA &d@    linepoint       = record number of last line record  
&dA &d@    syspoint        = record number of last system record 
&dA &d@    trigger         = flag for recognizing new measure in line 
&dA &d@    obcursor        = run-time pointer into pointers() array (location of cursor)
&dA &d@    supercursor     = run-time pointer into super_pointers() array (location of cursor)
&dA 
&dA                                                                        

&dA                                                                        &d@    
&dA 
&dA 
&dA &d@           Explanation of Variables for NEWFONTS 
&dA &d@       ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ 
&dA &d@    nsizes(12)      = The 12 available note sizes 
&dA &d@                        only sizes 3 [06], 8 [14], and 11 [21] are currently available
&dA &d@    revsizes(24)    = The reverse map to nsizes  
&dA &d@    XFonts(12,19)   = The number of 10s and the 6 x 3 (sizes, styles) for each notesize
&dA &d@    XFontstr.76(12) = XFont data in string form 
&dA &d@    Fspacex(90)     = index from (TMS font number - 50) to record in fontspac(.)
&dA 
&dA 
&dA                                                                        
